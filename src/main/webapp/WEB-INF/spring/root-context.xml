<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DriverManagerDataSource dataSource = new DriverManagerDataSource(url,username,password) -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost/seoulfloordb"></property>
		<property name="username" value="root"></property>
		<property name="password" value="tiger1234"></property>
	</bean>
	
	<!-- 
		SqlSessionFactory객체 dataSource를 이용하여 생성하면 spring이 참조하여 db를 사용함 
		DI : Dependence Injection 외부의 객체를 현재 객체에 주입하는 방식
	-->
		<!-- mybatis의 환경설정 파일과 xml파일의 위치 -->
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"></property>
	</bean>
	
	<mybatis-spring:scan base-package="com.ict.seoulfloor.dao"/>
	
	<!-- 트랜잭션 처리를 하는 마이바티스 객체를 생성 
		DataSourceTansactionManager transactionManager = new DataSourceTansactionManager(dataSource);
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- @Transactional 이용시 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
		
</beans>
